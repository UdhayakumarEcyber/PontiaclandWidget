"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
const chalk_1 = __importDefault(require("chalk"));
const boxen_1 = __importDefault(require("boxen"));
const axios_1 = __importDefault(require("axios"));
const fs_1 = __importDefault(require("fs"));
const mkdirp_1 = __importDefault(require("mkdirp"));
const path_1 = __importDefault(require("path"));
const form_data_1 = __importDefault(require("form-data"));
const cli_spinner_1 = __importDefault(require("cli-spinner"));
const clap_1 = __importDefault(require("clap"));
const https_1 = __importDefault(require("https"));
const VERSION = "0.1.1";
const LUCY_URL_ENV_VAR = "LUCY_URL";
const LUCY_APIKEY_ENV_VAR = "LUCY_API_KEY";
function upload(args, lucyUrl, lucyApiKey, lucyEnv) {
    if (args.length > 2) {
        throw 'Invalid arguments to upload command';
    }
    let jsonPath = './bundle.json';
    let sourcePath = './dist/main.js';
    if (args.length > 0) {
        sourcePath = args[0];
    }
    else {
        console.log(chalk_1.default.gray('Loading default source file', sourcePath));
    }
    if (args.length > 1) {
        jsonPath = args[1];
    }
    else {
        console.log(chalk_1.default.gray('Loading default bundle file', jsonPath));
    }
    let url = "";
    let apiKey = "";
    let targetFolderPath = path_1.default.dirname(jsonPath);
    let configFiles = ['.spaceworx.config', '.lucyxp.config'];
    if (lucyEnv) {
        if (!fs_1.default.existsSync(lucyEnv)) {
            throw 'Unable to find Lucy Environment file: ' + lucyEnv;
        }
        configFiles = [lucyEnv];
    }
    for (let i = 0; i < configFiles.length; i++) {
        let configPath = configFiles[i];
        if (!configFiles[i].startsWith('/')) {
            configPath = path_1.default.join(targetFolderPath, configFiles[i]);
        }
        if (fs_1.default.existsSync(configPath)) {
            console.log(chalk_1.default.gray(`Loading configuration from ${configPath}`));
            try {
                let contents = fs_1.default.readFileSync(configPath).toString();
                let configData = JSON.parse(contents);
                url = configData['url'];
                apiKey = configData['apiKey'];
                break;
            }
            catch (e) {
                console.log(chalk_1.default.red(`Unable to read ${configPath}:${e}`));
            }
        }
    }
    if (lucyUrl) {
        url = lucyUrl;
    }
    if (lucyApiKey) {
        apiKey = lucyApiKey;
    }
    if (!url) {
        throw 'No url specified';
    }
    if (!url.startsWith('http')) {
        throw 'Invalid server url:' + url;
    }
    if (!apiKey) {
        throw 'No api key specified';
    }
    if (!fs_1.default.existsSync(sourcePath)) {
        throw 'Unable to find source files at ' + sourcePath;
    }
    if (!fs_1.default.existsSync(jsonPath)) {
        throw 'Unable to find bundle.json at ' + jsonPath;
    }
    let code = '';
    let json = '';
    try {
        code = fs_1.default.readFileSync(sourcePath).toString();
    }
    catch (e) {
        throw 'Unable to read ' + sourcePath + ': ' + e;
    }
    try {
        json = fs_1.default.readFileSync(jsonPath).toString();
    }
    catch (e) {
        throw 'Unable to read ' + sourcePath + ': ' + e;
    }
    /* validate that bundle.json contains valid json */
    try {
        JSON.parse(json);
    }
    catch (e) {
        throw sourcePath + ' does not contain valid json: ' + e;
    }
    let formData = new form_data_1.default();
    formData.append('code', code);
    formData.append('json', json);
    let apiUrl = `${url}/api/UXP/RegisterBundle`;
    let loader = new cli_spinner_1.default.Spinner({
        text: 'Sending...',
        stream: process.stdout,
        onTick: function (msg) {
            this.clearLine(this.stream);
            this.stream.write(msg);
        },
    });
    console.log(chalk_1.default.gray(`Uploading to ☁ at ${apiUrl} using SC:***${apiKey.substring(apiKey.length - 3)}`));
    loader.start();
    let headers = formData.getHeaders();
    headers['Authorization'] = `APIKEY ${apiKey || ''}`;
    axios_1.default({
        method: "POST",
        url: apiUrl,
        data: formData,
        headers,
        cancelToken: new axios_1.default.CancelToken(function executor(c) {
            // An executor function receives a cancel function as a parameter
        })
    }).then(res => {
        let data = res.data;
        loader.stop(true);
        console.log(chalk_1.default.green('👍Done. Server returned:'));
        console.log(data);
    }).catch(e => {
        loader.stop(true);
        console.log(chalk_1.default.red('🧐Got an invalid response from the server: '));
        let message = JSON.stringify(e);
        if (!!e && !!e.response && !!e.response.data) {
            message = e.response.data;
            if (typeof message == 'object') {
                message = JSON.stringify(message);
            }
        }
        console.log(chalk_1.default.red(message));
    });
}
function login(url, apiKey) {
    console.log('Logging in....');
}
function generateUUID() {
    var d = new Date().getTime();
    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
        return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16);
    });
    return uuid;
}
function resolve(name) {
    let root = __dirname;
    return path_1.default.join(root, '..', name);
}
function capitalize(x) {
    return x.charAt(0).toUpperCase() + x.slice(1);
}
function normalizeID(name) {
    return name.replace(/[^0-9A-Za-z]/g, '_');
}
function normalizeName(name) {
    return capitalize(normalizeID(name));
}
var walk = function (dir, done) {
    var results = [];
    fs_1.default.readdir(dir, function (err, list) {
        if (err)
            return done(err, []);
        var i = 0;
        (function next() {
            var file = list[i++];
            if (!file)
                return done(null, results);
            file = path_1.default.resolve(dir, file);
            fs_1.default.stat(file, function (err, stat) {
                if (stat && stat.isDirectory()) {
                    walk(file, function (err, res) {
                        results = results.concat(res);
                        next();
                    });
                }
                else {
                    results.push(file);
                    next();
                }
            });
        })();
    });
};
function writePath(targetPath, content) {
    let targetDir = path_1.default.dirname(targetPath);
    if (!fs_1.default.existsSync(targetDir)) {
        mkdirp_1.default.sync(targetDir);
    }
    console.log(chalk_1.default.gray('Writing to'), chalk_1.default.gray(targetPath));
    fs_1.default.writeFileSync(targetPath, content);
}
function processTemplate(name, file, templatePath, env) {
    let content = fs_1.default.readFileSync(file).toString();
    content = content.replace(/__WIDGET__/g, normalizeID(name));
    content = content.replace(/__WIDGETNAME__/g, normalizeName(name));
    let guid = generateUUID();
    content = content.replace(/__GUID__/g, guid);
    // replace environment
    content = content.replace(/__ENV__/g, env);
    let filePath = file.substring(templatePath.length + 1);
    writePath(path_1.default.join(name, filePath), content);
}
function downloadLatest(projectName, env, file) {
    let url = `https://uxp.s3.amazonaws.com/dist/${env}/client/${file}`;
    let targetFilePath = path_1.default.join(projectName, file);
    const f = fs_1.default.createWriteStream(targetFilePath);
    console.log(chalk_1.default.gray('Loading', url));
    const request = https_1.default.get(url, function (response) {
        response.pipe(f);
        console.log(chalk_1.default.gray('saved', targetFilePath));
    });
}
function createWidget(name, env, done) {
    if (fs_1.default.existsSync(name)) {
        throw 'Folder ' + name + ' already exists. Please choose a different name';
    }
    let templatePath = resolve('template');
    walk(templatePath, (err, results) => {
        if (err) {
            throw err;
        }
        for (var i in results) {
            processTemplate(name, results[i], templatePath, env);
        }
        downloadLatest(name, env, 'uxp.d.ts');
        done();
    });
}
function main() {
    try {
        let cmd = clap_1.default
            .command('uxp-cli')
            .description('UXP Command Line Tool')
            .version(VERSION);
        cmd.command('init <project>')
            .option('--env <env>', 'development environment', { default: "master" })
            .action((actionArgs) => {
            let args = actionArgs.args || [];
            let name = args[0];
            // options 
            let options = actionArgs.options;
            let env = options.env;
            createWidget(name, env, () => {
                let msg = 'Ready. Run the following to get started\n\n';
                msg += chalk_1.default.green('Setup:\n');
                msg += 'cd ' + name + '\n';
                msg += 'npm install\n';
                msg += '\n';
                msg += chalk_1.default.green('Development:\n');
                msg += 'npm run dev\n';
                console.log(boxen_1.default(msg, { padding: 2 }));
            });
        });
        cmd.command('upload [dist.js] [bundle.json]')
            .option('--lucy-url <url>')
            .option('--lucy-apikey <apikey>')
            .option('--lucy-env <envfile>')
            .action((actionArgs) => {
            let args = actionArgs.args || [];
            let options = actionArgs.options || {};
            upload(args, options.lucyUrl, options.lucyApikey, options.lucyEnv);
        });
        cmd.run();
    }
    catch (e) {
        console.error(chalk_1.default.red(e));
    }
}
exports.main = main;
//# sourceMappingURL=index.js.map