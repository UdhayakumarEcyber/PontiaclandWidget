interface IWidgetProps {
    uxpContext: IUXPContext;
}
interface IUXPContext {
    executeAction: (model: string, action: string, parameters: any) => Promise<any>;
    fireEvent: (eventID: string) => Promise<void>;
    hasAppRole: (roles: string | string[]) => Promise<boolean>;
    lucyUrl: string;
    apiKey: string;
    userKey: string;
}

declare module "uxp/components" {
    // portal
    interface IPortalContainer { }
    export const PortalContainer: React.FunctionComponent<IPortalContainer>;

    // tooltip
    type ITooltipPosition = "top" | "bottom" | "left" | "right";
    interface ITooltip {
        content: any,
        position?: ITooltipPosition
    }
    export const Tooltip: React.FunctionComponent<ITooltip>;

    // popover
    interface IPopover {
        title: string | HTMLElement,
        content: string | HTMLElement,
        position?: ITooltipPosition
    }
    export const Popover: React.FunctionComponent<IPopover>;

    // modal
    interface IModal {
        show: boolean,
        title?: any,
        onOpen: any,
        onClose: any,
        backgroundDismiss?: boolean,
        closeButton?: any,
        styles?: any,
        class?: string,
        headerContent?: any
        showCloseButton?: boolean
    }
    export const Modal: React.FunctionComponent<IModal>;

    // filter panel
    interface ICallback {
        (): void
    }

    interface IFilterPanel {
        onOpen?: ICallback,
        onClose?: ICallback,
        onClear?: ICallback,
        fillContainer?: React.RefObject<HTMLElement>,
        className?: string
    }
    export const FilterPanel: React.FunctionComponent<IFilterPanel>;


    // toasts
    interface IToastContent {
        (content: {
            title?: string | HTMLElement,
            content: string | HTMLElement,
            showCloseBtn?: boolean,
            autoClose?: boolean,
            onClose?: any,
            closeAfter?: number,
        }): void
    }
    export const useToast: () => {
        success: IToastContent,
        error: IToastContent,
        warning: IToastContent,
        info: IToastContent
    };


    // form
    // form field
    interface IFormFieldProps {
        inline?: boolean,
        className?: string
    }
    export const FormField: React.FunctionComponent<IFormFieldProps>;

    // form feedback
    interface IFormFeedbackProps {
        validInput?: boolean,
        className?: string
    }
    export const FormFeedback: React.FunctionComponent<IFormFeedbackProps>;

    // label
    interface ILabelProps {
        labelFor?: string,
        className?: string
    }
    export const Label: React.FunctionComponent<ILabelProps>

    // input
    interface IInputProps {
        type: string,
        value: string,
        onChange: (value: string, ref: any) => void,
        className?: string,
        hasIndicator?: boolean,
        indicatorColor?: string,
        isValid?: boolean,
        inputAttr?: { [key: string]: string | boolean }
        inputRef: any,
        placeholder?: string
    }
    export const Input: React.FunctionComponent<IInputProps>;

    // checkbox
    type ICheckboxType = "default" | "bordered" | "change-icon" | "switch-line" | "switch-box";
    interface ICheckboxProps {
        onChange: (checked: boolean, ref: any) => void,
        inputRef: any
        checked: boolean,
        label?: string,
        isValid?: boolean,
        inputAttr?: { [key: string]: string | boolean },
        type?: ICheckboxType
    }
    export const Checkbox: React.FunctionComponent<ICheckboxProps>;

    // select 
    interface IOption {
        label: string,
        value: string,
        selected?: boolean
    }

    interface ISelectProps {
        name: string,
        value: string,
        options: IOption[],
        inputRef: any,
        onChange: any,
        placeholder?: string,
        id?: string,
        className?: string,
        isValid?: boolean,
        attr?: any
    }
    export const Select: React.FunctionComponent<ISelectProps>;



    // title bar
    interface IWidgetTitleBarProps {
        title: string;
        icon?: string;
    }
    export const TitleBar: React.FunctionComponent<IWidgetTitleBarProps>;


    // link widget container
    interface ILinkWidgetContainerProps {
        show: boolean,
        onOpen?: any,
        onClose?: any,
        title?: any,
        class?: string,
        toolbarContent?: any
    }
    export const LinkWidgetContainer: React.FunctionComponent<ILinkWidgetContainerProps>;

    interface IWidgetWrapperProps {
        className?: string
    }
    export const WidgetWrapper: React.FunctionComponent<IWidgetWrapperProps>;

    // loading
    export const Loading: React.FunctionComponent<{}>;

    // notification block
    interface INotificationProps {
        message: string,
        class?: string
    }
    export const NotificationBlock: React.FunctionComponent<INotificationProps>;

    // toggle filter
    interface IToggleOption {
        label: string,
        value: string
    }
    interface IToggleFilterProps {
        options: IToggleOption[],
        value: string,
        onChange: (newValue: string) => void
    }
    export const ToggleFilter: React.FunctionComponent<IToggleFilterProps>;

    // profile image
    interface IProfileImageProps {
        image?: string,
        name?: string,
        bgColor?: string,
        textColor?: string
    }
    export const ProfileImage: React.FunctionComponent<IProfileImageProps>;

    //data list
    interface IDataFunction {
        (max: number, lastPageToken: string, args?: any): Promise<{ items: Array<any>, pageToken: string }>;
    }
    interface IDataListProps {
        data: Array<any> | IDataFunction,
        renderItem: (item: any, key: number) => JSX.Element,
        pageSize: number,
        renderLoading?: () => JSX.Element,
        className?: string
    }
    export const DataList: React.FunctionComponent<IDataListProps>;

    // data grid
    interface IDataGridProps {
        data: Array<any>,
        renderItem: (item: any, key: number) => JSX.Element,
        columns: number,
        className?: string
    }

    export const DataGrid: React.FunctionComponent<IDataGridProps>;

    //item card
    interface IItemCardProps {
        item: any,
        imageField?: string,
        titleField?: string,
        subTitleField?: string,
        nameField?: string,
        className?: string
    }

    export const ItemCard: React.FunctionComponent<IItemCardProps>;

    // pie chart
    interface IDataItem { name: string, value: number, color?: string }
    interface IPieChartProps {
        data: IDataItem[],
        fillColor: string,
        showLegend?: boolean
    }
    export const PieChartComponent: React.FunctionComponent<IPieChartProps>
}